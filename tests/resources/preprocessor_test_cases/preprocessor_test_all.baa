// ==============================================
// ===        ملف اختبار المعالج المسبق       ===
// ==============================================

// --- 0. الإعداد الأولي والتعليقات ---
// هذا تعليق سطر واحد
/*
  هذا تعليق
  متعدد الأسطر
*/
#تعريف VERSION "0.1.14.0" // تعليق في نهاية السطر

// --- 1. اختبار #تضمين ---
#تضمين "include_test_header.baa" // يفترض وجوده في نفس المجلد
// يجب أن يظهر السطر من الهيدر هنا

#تعريف SHOULD_INCLUDE_NESTED
#إذا_عرف SHOULD_INCLUDE_NESTED
  #تضمين "nested_include.baa"
#نهاية_إذا

// --- 2. اختبار #تعريف و #الغاء_تعريف ---
#تعريف PI 3.14
#تعريف GREETING "مرحباً يا عالم"
#تعريف CONST_INT 123
#تعريف EMPTY_MACRO // تعريف فارغ

قيمة PI هي PI.
التحية: GREETING.
الرقم: CONST_INT.
فارغ: EMPTY_MACRO نهاية.

#الغاء_تعريف CONST_INT
#إذا_عرف CONST_INT
  خطأ: CONST_INT لا يزال معرفًا!
#إلا
  تم إلغاء تعريف CONST_INT بنجاح.
#نهاية_إذا

// اختبار إعادة التعريف (يجب أن يحل الجديد محل القديم)
#تعريف PI 3.14159
قيمة PI الجديدة هي PI.

// --- 3. اختبار الماكروهات الوظيفية ---
#تعريف SQUARE(x) ((x)*(x))
#تعريف ADD(a, b) (a + b)
#تعريف MULTIPLY(x, y) x * y

مربع 5 هو SQUARE(5).
جمع 3 و 4 هو ADD(3, 4).
ضرب 2 و 3 هو MULTIPLY(2, 3).
مربع (ADD(1,2)) هو SQUARE(ADD(1,2)).

// --- 4. اختبار # (Stringification) ---
#تعريف STRINGIFY(val) #val
#تعريف STRINGIFY_EXPR(expr) "التعبير " #expr " قيمته " STRINGIFY(expr)

نص: STRINGIFY(مثال).
نص رقم: STRINGIFY(123).
نص تعبير: STRINGIFY(10 + 20).
رسالة: STRINGIFY_EXPR(ADD(5,5)).

// --- 5. اختبار ## (Token Pasting) ---
#تعريف CONCAT(a, b) a##b
#تعريف MAKE_VAR(type, name) type CONCAT(var_, name)
#تعريف PASTE_EMPTY(a,b) a##b
#تعريف PASTE_WITH_NUM(prefix, num) prefix##num

MAKE_VAR(عدد_صحيح, counter) = 10. // يجب أن ينتج: عدد_صحيح var_counter = 10.
عدد_صحيح CONCAT(val, 1) = 1.
عدد_صحيح CONCAT(val, CONCAT(2, _suffix)) = 2.
رسالة PASTE_EMPTY(hello,world). // helloworld
رسالة PASTE_EMPTY(hello,). // hello
رسالة PASTE_EMPTY(,world). // world
عدد_صحيح PASTE_WITH_NUM(counter, 123) = 0.

// --- 6. اختبار الماكروهات المتغيرة (Variadic Macros) ---
#تعريف DEBUG_LOG(format, وسائط_إضافية) print_debug(VERSION, format, __وسائط_متغيرة__)
#تعريف SIMPLE_LOG(وسائط_إضافية) print_simple(__وسائط_متغيرة__)

DEBUG_LOG("قيمة س = %d", س).
DEBUG_LOG("نقطة تتبع").
SIMPLE_LOG(1, 2, "ثلاثة").
SIMPLE_LOG(). // وسائط_متغيرة فارغة

// --- 7. اختبار إعادة فحص الماكرو (Rescanning) ---
#تعريف X Y
#تعريف Y Z
#تعريف Z النهاية

X // يجب أن يتوسع إلى النهاية

#تعريف A B C
#تعريف B VAL_B
#تعريف C VAL_C
A // يجب أن يتوسع إلى VAL_B VAL_C

#تعريف LOOP1 LOOP2
#تعريف LOOP2 LOOP1
// LOOP1 // هذا يسبب تكرارًا لا نهائيًا، يجب أن يتم اكتشافه وإيقافه (أو حد معين)
// تعليق مؤقت لتجنب الخطأ، المعالج يجب أن يتعامل مع هذا.
تم تجاوز اختبار التكرار المباشر.

#تعريف PASTE_RESCAN_LHS lhs_val
#تعريف PASTE_RESCAN_RHS rhs_val
#تعريف PASTE_THEN_RESCAN PASTE_RESCAN_LHS ## _ ## PASTE_RESCAN_RHS
// يجب أن يتم توسيع PASTE_RESCAN_LHS و PASTE_RESCAN_RHS *قبل* اللصق إذا كانت هذه هي الدلالات،
// أو يتم لصق الأسماء ثم إعادة الفحص. سلوك C هو أن الوسائط يتم توسيعها ما لم تكن جزءًا من # أو ##.
// ثم يتم إعادة فحص النتيجة الكاملة.
PASTE_THEN_RESCAN // المتوقع: lhs_val_rhs_val

#تعريف WRAP(content) START content END
#تعريف INNER INNER_VAL
WRAP(INNER) // START INNER_VAL END

// اختبار معقد لإعادة الفحص مع اللصق
#تعريف PREFIX pre
#تعريف SUFFIX post
#تعريف COMBINE(p,s) p ## s
#تعريف APPLY_PREFIX(val) COMBINE(PREFIX, val)
#تعريف APPLY_SUFFIX(val) COMBINE(val, SUFFIX)
#تعريف FULL_NAME APPLY_PREFIX(APPLY_SUFFIX(Name))
// FULL_NAME
// 1. APPLY_PREFIX(APPLY_SUFFIX(Name))
// 2. COMBINE(PREFIX, APPLY_SUFFIX(Name)) -> pre ## APPLY_SUFFIX(Name) -> preAPPLY_SUFFIX(Name) (لأن APPLY_SUFFIX وسيط لـ ##)
//    وفقًا لمعيار C، إذا كان المعامل لـ ## هو ماكرو، فلا يتم توسيعه.
//    ثم إعادة الفحص: preAPPLY_SUFFIX(Name)
//    ثم يتوسع APPLY_SUFFIX(Name) -> COMBINE(Name, SUFFIX) -> Name ## SUFFIX -> Namepost
//    ثم: preNamepost
// هذا هو السلوك الصحيح المتوقع.
الاسم_الكامل هو FULL_NAME. // يجب أن يكون preNamepost


// --- 8. اختبار التجميع الشرطي ---
#تعريف FEATURE_A 1
#تعريف FEATURE_B 0
#تعريف UNDEFINED_MACRO // لا يوجد تعريف

#إذا FEATURE_A
  ميزة أ مفعلة.
#نهاية_إذا

#إذا FEATURE_B
  خطأ: ميزة ب يجب ألا تكون مفعلة.
#إلا
  ميزة ب غير مفعلة (صحيح).
#نهاية_إذا

#إذا معرف(FEATURE_A) && !معرف(FEATURE_C)
  تعبير مركب صحيح.
#نهاية_إذا

#إذا FEATURE_A == 1
  FEATURE_A قيمتها 1.
#نهاية_إذا

#إذا FEATURE_B != 0
  خطأ: FEATURE_B يجب أن تكون 0.
#نهاية_إذا

#إذا UNDEFINED_MACRO // تقييم إلى 0
  خطأ: UNDEFINED_MACRO لا يجب أن يعتبر صحيحًا.
#إلا
  UNDEFINED_MACRO تقييم إلى خطأ (صحيح).
#نهاية_إذا

// اختبار #وإلا_إذا
#تعريف LEVEL 2
#إذا LEVEL == 1
  المستوى 1.
#وإلا_إذا LEVEL == 2 && معرف(FEATURE_A)
  المستوى 2 وهو الصحيح.
#وإلا_إذا LEVEL == 3
  المستوى 3.
#إلا
  مستوى آخر.
#نهاية_إذا

// اختبار عوامل البت
#تعريف FLAGS 0x05 // ...0101
#إذا (FLAGS & 0x01) && (FLAGS | 0x02) == 0x07 && (FLAGS ^ 0x04) == 0x01 && (~FLAGS & 0x0F) == 0x0A && (FLAGS << 1) == 0x0A && (FLAGS >> 1) == 0x02
  عوامل البت تعمل بشكل صحيح.
#إلا
  خطأ في عوامل البت.
#نهاية_إذا


// --- 9. اختبار الماكروهات المدمجة ---
الملف الحالي: __الملف__
السطر الحالي: __السطر__
التاريخ الحالي: __التاريخ__
الوقت الحالي: __الوقت__
الدالة الحالية: __الدالة__
إصدار باء: __إصدار_المعيار_باء__

سطر آخر لتغيير __السطر__.
السطر الجديد: __السطر__.


// --- 10. اختبار #تحذير ---
#تحذير هذه رسالة تحذير اختبارية. // يجب أن يظهر هذا التحذير في stderr
هذا السطر يجب أن يظهر في stdout بعد التحذير.

#إذا 1 // كتلة شرطية صحيحة
  #تحذير تحذير داخل كتلة #إذا.
  سطر داخل كتلة شرطية صحيحة.
#نهاية_إذا

#إذا 0 // كتلة شرطية خاطئة
  #تحذير هذا التحذير يجب ألا يظهر.
  هذا السطر يجب ألا يظهر.
#نهاية_إذا

#تحذير رسالة تحذير مع // تعليق في نهايتها


// --- 11. اختبار #خطأ ---
// يجب وضع هذا الاختبار في النهاية أو في ملف منفصل لأنه يوقف المعالجة.
// قم بإلغاء التعليق لاختباره.

// #تعريف TRIGGER_ERROR
// #إذا_عرف TRIGGER_ERROR
//   #خطأ هذه رسالة خطأ اختبارية مقصودة.
//   هذا السطر يجب ألا تتم معالجته أبدًا.
// #نهاية_إذا
// #إذا 1
//   #خطأ خطأ آخر يجب أن يوقف المعالجة.
// #نهاية_إذا

// إذا تم الوصول إلى هنا، فهذا يعني أن #خطأ لم يتم تفعيله (أو تم التعليق عليه)
تم إكمال جميع الاختبارات غير المسببة للخطأ.

#تعريف OP_PLUS +
#تعريف VAL1 10
#تعريف VAL2 20
#إذا VAL1 OP_PLUS VAL2 == 30
  OP_PLUS_WORKS
#نهاية_إذا

#تعريف IS_ZERO(x) ((x) == 0)
#تعريف ADD(a,b) a+b
#إذا IS_ZERO(ADD(5, -5))
  FUNC_MACRO_IN_IF_WORKS
#نهاية_إذا

#تعريف GET_VAL VAL_A
#تعريف VAL_A 5
#إذا GET_VAL > 0
  RESCAN_IN_IF_WORKS
#نهاية_إذا
